name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 1.8
      # 设置jdk环境
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      # 将GTIHUB的信息都打印出来，后面的脚本可以使用这些信息，例如后面的镜像TAG用的就是这里面的commitid
      run: echo "Hello ${{ github.event.commits[0].id }}"
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Extract files from jar
      # 从构建好的jar中提取制作镜像所需的内容，例如依赖jar、class、配置文件等
      run: mkdir -p app/build/dependency && (cd app/build/dependency; jar -xf ../libs/*.jar)
    - name: Login docker hub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_PASSWORD}}
      # 指定login命令登录hub.docker.com，帐号和密码已经在GitHub网页中配置好了
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username ${DOCKER_USERNAME} --password-stdin
    - name: Set up Docker Buildx
      # 使用buildx来构建镜像，这个工具功能很丰富
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
    - name: Build with dockerfile (with push)
      # 构建镜像，用buildx可以同时构建X86和ARM架构的镜像，然后推送到hub.docker.com
      run: |
        cd app && \
        fullCommit="${{ github.event.commits[0].id }}" && \
        docker buildx build \
        --platform=linux/amd64,linux/arm/v7,linux/arm64 \
        --output "type=image,push=true" \
        --file ./Dockerfile . \
        --tag outman2444/docker-CI-CD-demo:"${fullCommit: 0: 7}"